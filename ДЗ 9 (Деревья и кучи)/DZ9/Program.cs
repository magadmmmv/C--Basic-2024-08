/*
Напишите программу, которая:

1) принимает на вход из консоли информацию о сотрудниках: имя + зарплата (имя в первой строке, зарплата в виде целого числа во второй строке; 
и так для каждого сотрудника, пока пользователь не введет пустую строку в качестве имени сотрудника)

2) попутно при получении информации о сотрудниках строится бинарное дерево с этой информацией, где в каждом узле хранится 
имя сотрудника, а его зарплата является значением, на основе которого производится бинарное разделение в дереве

3) после окончания ввода пользователем программа выводит имена сотрудников и их зарплаты в порядке возрастания зарплат 
(в каждой строчке формат вывода "Имя - зарплата"). Использовать для этого симметричный обход дерева.

4) после этого программа запрашивает размер зарплаты, который интересует пользователя. В построенном бинарном дереве 
программа находит сотрудника с указанной зарплатой и выводит его имя. Если сотрудник не найден - выводится "такой сотрудник не найден"

5) после этого программа предлагает ввести цифру 0 (переход к началу программы) или 1 (снова поиск зарплаты). При вводе 0 должен произойти переход к началу работы программы, 
т.е. опять запрашивается список сотрудников и строится новое дерево. При вводе 1 должны снова запросить зарплату, которую хочется поискать в дереве - см.предыдущий пункт.
*/

namespace DZ9
{
    public class Program
    {
        static void Main(string[] args)
        {
            int flag = 0;
            while (flag == 0)
            {
                // 1, 2 Построение бинарного дерева

                // Раскоментировать InputTree() и закоментировать InputManualTree(), если требуется ручной ввод сотрудников
                //TreeNode? employeeTree = TreeOperations.InputTree();

                // (Доп балл за зашитые значения сотрудников)
                // Закоментировать InputManualTree() и раскоментировать InputTree(), если не требуется автоматический ввод сотрудников
                TreeNode? employeeTree = TreeOperations.InputManualTree();

                // 3 Вывод сотрудников, отсортированный по их зарплате
                Console.WriteLine();
                TreeOperations.TraverseEmployeers(employeeTree!);
                Console.WriteLine();

                // 4 Поиск сотрудника с искомой зарплатой
                do
                {
                    flag = 1;
                    TreeOperations.FindSalary(employeeTree!);

                    //5 Реализован интерактив
                    while (true)
                    {
                        Console.WriteLine("Введите цифру 0 для перехода к началу программы или цифру 1 для поиска зарплаты или цифру 2 для выхода из программы");
                        try
                        {
                            flag = int.Parse(Console.ReadLine()!);
                        }
                        catch
                        {
                            Console.WriteLine("Требуется цифровой ввод");
                            continue;
                        }

                        if (flag == 0 || flag == 1 || flag == 2)
                        {
                            Console.WriteLine();
                            break;
                        }
                    }
                }
                while (flag == 1);
            }

            Console.WriteLine("Завершение программы.");
        }
    }
}
